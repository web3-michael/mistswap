{
  "language": "Solidity",
  "sources": {
    "contracts/WBCH.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.6.12;\n\ninterface ISEP20Native {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address _account) external view returns (uint256);\n\n    function transfer(address _to, uint256 _value) external returns (bool);\n\n    function transferFrom(address _from, address _to, uint256 _value) external returns (bool);\n\n    function approve(address _spender, uint256 _value) external returns (bool);\n\n    function allowance(address _owner, address _spender) external view returns (uint256);\n\n    function increaseAllowance(address _spender, uint256 _delta) external returns (bool);\n    function decreaseAllowance(address _spender, uint256 _delta) external returns (bool);\n\n\n\n}\n\ncontract WBCH is ISEP20Native {\n    // https://docs.smartbch.org/smartbch/smartbch-evolution-proposals-seps/sep-206\n    address nativeAddress = 0x0000000000000000000000000000000000002711;\n    ISEP20Native native = ISEP20Native(nativeAddress);\n\n    function name() external view returns (string memory) {\n        return \"BCH\";\n    }\n\n    function symbol() external view returns (string memory) {\n        (bool success, bytes memory data) = address(nativeAddress).staticcall(abi.encodeWithSelector(0x95d89b41));\n        return success && data.length > 0 ? abi.decode(data, (string)) : \"???\";\n    }\n\n    function decimals() external view returns (uint256) {\n        (bool success, bytes memory data) = address(nativeAddress).staticcall(abi.encodeWithSelector(0x313ce567));\n        return success && data.length == 32 ? abi.decode(data, (uint8)) : 18;\n    }\n\n    function totalSupply() external view override returns (uint256) {\n        return 21E24;\n    }\n\n    function balanceOf(address _account) external view override returns (uint256) {\n        return native.balanceOf(_account);\n    }\n\n    function transfer(address _to, uint256 _value) external override returns (bool) {\n        (bool success, bytes memory data) = address(nativeAddress).call(abi.encodeWithSelector(0xa9059cbb, _to, _value));\n        require(success && (data.length == 0 || abi.decode(data, (bool))), \"SEP20: Transfer failed\");\n    }\n\n    function transferFrom(address _from, address _to, uint256 _value) external override returns (bool) {\n        return native.transferFrom(_from, _to, _value);\n    }\n\n    function approve(address _spender, uint256 _value) external override returns (bool) {\n        return native.approve(_spender, _value);\n    }\n\n    function allowance(address _owner, address _spender) external view override returns (uint256) {\n        return native.allowance(_owner, _spender);\n    }\n\n    function increaseAllowance(address _spender, uint256 _delta) external override returns (bool) {\n        return native.increaseAllowance(_spender, _delta);\n    }\n\n    function decreaseAllowance(address _spender, uint256 _delta) external override returns (bool) {\n        return native.decreaseAllowance(_spender, _delta);\n    }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    },
    "libraries": {
      "": {
        "__CACHE_BREAKER__": "0x00000000d41867734bbee4c6863d9255b2b06ac1"
      }
    }
  }
}